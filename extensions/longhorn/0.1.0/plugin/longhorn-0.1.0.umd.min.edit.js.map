{"version":3,"file":"longhorn-0.1.0.umd.min.edit.js","mappings":"ohBA0FiBA,EAAAC,YAAYC,UAAO,kBAAlCC,EAAAA,EAAAA,aAAsCC,EAAA,CAAAC,IAAA,yBACtCC,EAAAA,EAAAA,oBA8BM,MAAAC,EAAA,EA7BJC,EAAAA,EAAAA,aA4BcC,EAAA,CA3BX,aAAYT,EAAAU,UACZC,KAAMC,EAAAD,KACNE,SAAUD,EAAAE,MACV,oBAAmBd,EAAAe,cACnBC,OAAQhB,EAAAiB,6BACRC,SAAQC,EAAAC,KACRC,SAAQrB,EAAAsB,KACRC,QAAOJ,EAAAI,S,wBAER,IAOE,EAPFf,EAAAA,EAAAA,aAOEgB,EAAA,CANCV,MAAOF,EAAAE,MACPH,KAAMC,EAAAD,KACN,sBAAoB,EACpB,cAAaC,EAAAD,OAASc,EAAAC,MACtB,sBAAoB,EACpB,kBAAiBD,EAAAE,oB,0DAEpBnB,EAAAA,EAAAA,aASSoB,EAAA,CATDC,SAAA,GAAUhB,SAAUD,EAAAE,O,wBAC1B,IAOM,EAPNN,EAAAA,EAAAA,aAOMsB,EAAA,CAPDC,KAAK,SAASC,SAAS,mC,wBAC1B,IAKE,EALFxB,EAAAA,EAAAA,aAKEyB,EAAA,CAJAD,SAAS,oCACRrB,KAAMC,EAAAD,KACCG,MAAOF,EAAAE,MAAMoB,KAAKC,M,gCAAXvB,EAAAE,MAAMoB,KAAKC,MAAKC,GAC9BC,MAAOrC,EAAAsC,wBAAwB,e,2SAvG5C,GACEP,KAAM,kBAENQ,WAAY,CACVC,QAAO,IACPC,YAAW,IACXC,kBAAiB,IACjBC,aAAY,IACZC,OAAM,IACNC,IAAGA,EAAAA,GAGLC,OAAQ,CAACC,EAAAA,EAAgBC,EAAAA,GAEzBC,MAAO,CACLtC,KAAM,CACJuC,KAAMC,OACNC,QAASC,EAAAA,IAEXvC,MAAO,CACLoC,KAAMI,OACNC,UAAU,IAIdC,IAAAA,GACE,MAAO,CACLC,eAAgB,CACd,CACEC,KAAM,aACNrB,MAAO,CAAC,YACRsB,eAAgB,oCAGpBhC,mBAAkB,KAClBD,MAAKA,EAAAA,GAET,EAEAkC,OAAAA,GACOC,KAAK/C,MAAMoB,OACd2B,KAAK/C,MAAMoB,KAAO,CAAC,QAES4B,IAA1BD,KAAK/C,MAAMoB,KAAKC,QAClB0B,KAAK/C,MAAMoB,KAAKC,MAAQ,GAE5B,EAEA4B,QAAS,CACPxC,OAAAA,CAAQP,GACN6C,KAAK7C,OAASgD,MAAMC,QAAQjD,GAAUA,EAAS,CAACA,EAClD,EAEA,UAAMI,CAAK8C,GAGT,GAFAL,KAAK7C,OAAS,IAET6C,KAAK/C,MAAMoB,KAAKC,MAKnB,OAJA0B,KAAK7C,OAAOmD,KACVN,KAAKO,EAAE,4DAETF,GAAW,GAIb,UACQL,KAAKQ,eACXH,GAAW,GACXL,KAAKvC,MACP,CAAE,MAAOgD,GACPT,KAAK7C,QAASuD,EAAAA,EAAAA,IAAuBD,EACvC,CACF,I,WC/EJ,MAAME,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://longhorn-0.1.0/./edit/longhorn.io.engineimage.vue","webpack://longhorn-0.1.0/./edit/longhorn.io.engineimage.vue?7c91"],"sourcesContent":["<script>\nimport Loading from \"@shell/components/Loading\";\nimport CruResource from \"@shell/components/CruResource\";\nimport NameNsDescription from \"@shell/components/form/NameNsDescription\";\nimport { LabeledInput } from \"@components/Form/LabeledInput\";\nimport Tabbed from \"@shell/components/Tabbed\";\nimport Tab from \"@shell/components/Tabbed/Tab\";\nimport CreateEditView from \"@shell/mixins/create-edit-view\";\nimport FormValidation from \"@shell/mixins/form-validation\";\nimport { _CREATE, _VIEW } from \"@shell/config/query-params\";\nimport { exceptionToErrorsArray } from \"@shell/utils/error\";\nimport { LONGHORN_NAMESPACE } from \"../types/longhorn\";\n\nexport default {\n  name: \"EditEngineImage\",\n\n  components: {\n    Loading,\n    CruResource,\n    NameNsDescription,\n    LabeledInput,\n    Tabbed,\n    Tab,\n  },\n\n  mixins: [CreateEditView, FormValidation],\n\n  props: {\n    mode: {\n      type: String,\n      default: _CREATE,\n    },\n    value: {\n      type: Object,\n      required: true,\n    },\n  },\n\n  data() {\n    return {\n      fvFormRuleSets: [\n        {\n          path: \"spec.image\",\n          rules: [\"required\"],\n          translationKey: \"longhorn.engineImage.form.image\",\n        },\n      ],\n      LONGHORN_NAMESPACE,\n      _VIEW,\n    };\n  },\n\n  created() {\n    if (!this.value.spec) {\n      this.value.spec = {};\n    }\n    if (this.value.spec.image === undefined) {\n      this.value.spec.image = \"\";\n    }\n  },\n\n  methods: {\n    onError(errors) {\n      this.errors = Array.isArray(errors) ? errors : [errors];\n    },\n\n    async save(buttonDone) {\n      this.errors = [];\n\n      if (!this.value.spec.image) {\n        this.errors.push(\n          this.t(\"longhorn.engineImage.form.validation.imageRequired\")\n        );\n        buttonDone(false);\n        return;\n      }\n\n      try {\n        await this.actuallySave();\n        buttonDone(true);\n        this.done();\n      } catch (err) {\n        this.errors = exceptionToErrorsArray(err);\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <CruResource\n      :done-route=\"doneRoute\"\n      :mode=\"mode\"\n      :resource=\"value\"\n      :validation-passed=\"fvFormIsValid\"\n      :errors=\"fvUnreportedValidationErrors\"\n      @finish=\"save\"\n      @cancel=\"done\"\n      @error=\"onError\"\n    >\n      <NameNsDescription\n        :value=\"value\"\n        :mode=\"mode\"\n        :namespace-disabled=\"true\"\n        :name-hidden=\"mode !== _VIEW\"\n        :description-hidden=\"true\"\n        :force-namespace=\"LONGHORN_NAMESPACE\"\n      />\n      <Tabbed sideTabs :resource=\"value\">\n        <Tab name=\"basics\" labelKey=\"longhorn.engineImage.tab.basics\">\n          <LabeledInput\n            labelKey=\"longhorn.engineImage.fields.image\"\n            :mode=\"mode\"\n            v-model:value=\"value.spec.image\"\n            :rules=\"fvGetAndReportPathRules('spec.image')\"\n          />\n        </Tab>\n      </Tabbed>\n    </CruResource>\n  </div>\n</template>\n","import { render } from \"./longhorn.io.engineimage.vue?vue&type=template&id=245fa18c\"\nimport script from \"./longhorn.io.engineimage.vue?vue&type=script&lang=js\"\nexport * from \"./longhorn.io.engineimage.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_ctx","$fetchState","pending","_createBlock","_component_Loading","key","_createElementBlock","_hoisted_1","_createVNode","_component_CruResource","doneRoute","mode","$props","resource","value","fvFormIsValid","errors","fvUnreportedValidationErrors","onFinish","$options","save","onCancel","done","onError","_component_NameNsDescription","$data","_VIEW","LONGHORN_NAMESPACE","_component_Tabbed","sideTabs","_component_Tab","name","labelKey","_component_LabeledInput","spec","image","$event","rules","fvGetAndReportPathRules","components","Loading","CruResource","NameNsDescription","LabeledInput","Tabbed","Tab","mixins","CreateEditView","FormValidation","props","type","String","default","_CREATE","Object","required","data","fvFormRuleSets","path","translationKey","created","this","undefined","methods","Array","isArray","buttonDone","push","t","actuallySave","err","exceptionToErrorsArray","__exports__","render"],"sourceRoot":""}